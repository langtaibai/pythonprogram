迭代：访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。

1.可迭代对象： 在上次的基础上在进行迭代

可以直接作用于for循环的数据类型，一类是集合数据类型，如list，tuple,dict,set,str等，
一类是generator，包括生成器和带yield的generator function，这些对象统称为可迭代对象iterable

2.判断是否可迭代

用ininstance()判断一个对象是否是iterable对象。

from collections.abc import Iterator #3.8版本collection改为collection.abc
isinstance([1,2,3],Iterator)

迭代器：
生成器一定是迭代器
可以被next()函数调用的并不False断返回下一个值的对象成为迭代器： Iterator
可以使用instance()判断一个对象是否是Iterator对象
isinstance([],Iterator)
False

创建迭代器
iter()函数

把list、dict、str等iterable变成iterator可以使用iter()函数

isinstance(iter([]),Iterator)
True

闭包：
#定义一个函数
def test(number):
    #在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么僵这个函数以及用到的一些变量称之为闭包
    def test_in(number_in):
        print("in test_in 函数，number_in is %d"%number_in)
        return number+number_in
    #其实这里返回的就是闭包的结果
    return test_in
 def test(number):
    print("1")
    def test_in():
        print("2")
        print(number+1)
    print("3")
    return test_in
test()
result:
1
3
ret = test(100)
ret()
注意ret指向的是下面这一段：
def test_in():
        print("2")
        print(number+1
such as:
def test(number):
    print("1")
    def test_in(number1):
        print("2")
        print(number+number1)
    print("3")
    return test_in
ret = test(100)
ret(1)
ret(2)
result: 注意ret只执行一段
1
3
2
101
2
102

# def line_conf(a,b):
    # def line(x):
        # print(a*x+b)
    # return line
# line1 = line_conf(1,1)
# line1(2)
# line1(3)
    
def createNum(a,b,x):
    print(a*x+b)
a=1
b=1
x=0
creatNum(a,b,x)
#之前要看a*x+b，都得改，因为执行完createNum函数值都会释放掉，但是用闭包的话，但是闭包可以简化参数的赋值
如果两次调用，比如line1和line2，这在内存中是开辟了两块内存
